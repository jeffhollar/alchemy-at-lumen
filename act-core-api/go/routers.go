/*
 * ACT Core API
 *
 * API documentation for ACT Core system
 *
 * API version: 1.0.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

import (
	"fmt"
	"log"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// Route represents a single HTTP route configuration
// Fields:
//   - Name: The name of the route
//   - Method: HTTP method (GET, POST, etc.)
//   - Pattern: URL pattern with path parameters
//   - HandlerFunc: The function that handles the request
type Route struct {
	Name        string
	Method      string
	Pattern     string
	HandlerFunc http.HandlerFunc
}

// Routes is a collection of Route configurations
type Routes []Route

// NewRouter creates and configures a new Gorilla Mux router with all defined routes
// Returns:
//   - *mux.Router: Configured router instance with all routes and middleware
func NewRouter() *mux.Router {
	router := mux.NewRouter().StrictSlash(true)
	for _, route := range routes {
		var handler http.Handler
		handler = route.HandlerFunc
		handler = Logger(handler, route.Name)

		router.
			Methods(route.Method).
			Path(route.Pattern).
			Name(route.Name).
			Handler(handler)
	}

	return router
}

// Index is the root endpoint handler that returns a simple welcome message
// Parameters:
//   - w: HTTP response writer
//   - r: HTTP request
func Index(w http.ResponseWriter, r *http.Request) {
	_, err := fmt.Fprintf(w, "Act Core API Service")
	if err != nil {
		return
	}
}

var routes = Routes{
	Route{
		"Index",
		"GET",
		"/",
		Index,
	},

	Route{
		"GetServiceHealth",
		strings.ToUpper("Options"),
		"/Network/v1/Provisioning/health",
		GetServiceHealth,
	},
	Route{
		"GetServiceHealth",
		strings.ToUpper("Get"),
		"/Network/v1/Provisioning/health",
		GetServiceHealth,
	},

	Route{
		"GetServiceInfo",
		strings.ToUpper("Options"),
		"/Network/v1/Provisioning/info",
		GetServiceInfo,
	},
	Route{
		"GetServiceInfo",
		strings.ToUpper("Get"),
		"/Network/v1/Provisioning/info",
		GetServiceInfo,
	},

	Route{
		"ActRequestIdentifierIDGet",
		strings.ToUpper("Options"),
		"/Network/v1/Provisioning/actRequest/{identifierID}",
		ActRequestIdentifierIDGet,
	},
	Route{
		"ActRequestIdentifierIDGet",
		strings.ToUpper("Get"),
		"/Network/v1/Provisioning/actRequest/{identifierID}",
		ActRequestIdentifierIDGet,
	},

	Route{
		"ActRequestIdentifierIDYangGet",
		strings.ToUpper("Options"),
		"/Network/v1/Provisioning/actRequest/{identifierID}/yang",
		ActRequestIdentifierIDYangGet,
	},
	Route{
		"ActRequestIdentifierIDYangGet",
		strings.ToUpper("Get"),
		"/Network/v1/Provisioning/actRequest/{identifierID}/yang",
		ActRequestIdentifierIDYangGet,
	},

	Route{
		"EditDataRequestIDPut",
		strings.ToUpper("Options"),
		"/Network/v1/Provisioning/editData/{requestID}",
		EditDataRequestIDPut,
	},
	Route{
		"EditDataRequestIDPut",
		strings.ToUpper("Put"),
		"/Network/v1/Provisioning/editData/{requestID}",
		EditDataRequestIDPut,
	},

	Route{
		"LavaIdentifierIdPost",
		strings.ToUpper("Options"),
		"/Network/v1/Provisioning/lava/{identifier_id}",
		LavaIdentifierIdPost,
	},
	Route{
		"LavaIdentifierIdPost",
		strings.ToUpper("Post"),
		"/Network/v1/Provisioning/lava/{identifier_id}",
		LavaIdentifierIdPost,
	},

	Route{
		"RequestGet",
		strings.ToUpper("Options"),
		"/Network/v1/Provisioning/request",
		RequestGet,
	},
	Route{
		"RequestGet",
		strings.ToUpper("Get"),
		"/Network/v1/Provisioning/request",
		RequestGet,
	},

	Route{
		"RequestPost",
		strings.ToUpper("Options"),
		"/Network/v1/Provisioning/request",
		RequestPost,
	},
	Route{
		"RequestPost",
		strings.ToUpper("Post"),
		"/Network/v1/Provisioning/request",
		RequestPost,
	},

	Route{
		"RequestRequestIdGet",
		strings.ToUpper("Options"),
		"/Network/v1/Provisioning/request/{requestId}",
		RequestRequestIdGet,
	},
	Route{
		"RequestRequestIdGet",
		strings.ToUpper("Get"),
		"/Network/v1/Provisioning/request/{requestId}",
		RequestRequestIdGet,
	},

	Route{
		"RequestRequestIdPut",
		strings.ToUpper("Options"),
		"/Network/v1/Provisioning/request/{requestId}",
		RequestRequestIdPut,
	},
	Route{
		"RequestRequestIdPut",
		strings.ToUpper("Put"),
		"/Network/v1/Provisioning/request/{requestId}",
		RequestRequestIdPut,
	},

	Route{
		"RestartActivationRequestIDPut",
		strings.ToUpper("Options"),
		"/Network/v1/Provisioning/restartActivation/{requestID}",
		RestartActivationRequestIDPut,
	},
	Route{
		"RestartActivationRequestIDPut",
		strings.ToUpper("Put"),
		"/Network/v1/Provisioning/restartActivation/{requestID}",
		RestartActivationRequestIDPut,
	},

	Route{
		"RestartDataGatheringRequestIDPut",
		strings.ToUpper("Options"),
		"/Network/v1/Provisioning/restartDataGathering/{requestID}",
		RestartDataGatheringRequestIDPut,
	},
	Route{
		"RestartDataGatheringRequestIDPut",
		strings.ToUpper("Put"),
		"/Network/v1/Provisioning/restartDataGathering/{requestID}",
		RestartDataGatheringRequestIDPut,
	},

	Route{
		"VinoIdentifierIdPost",
		strings.ToUpper("Options"),
		"/Network/v1/Provisioning/vino/{identifier_id}",
		VinoIdentifierIdPost,
	},
	Route{
		"VinoIdentifierIdPost",
		strings.ToUpper("Post"),
		"/Network/v1/Provisioning/vino/{identifier_id}",
		VinoIdentifierIdPost,
	},

	Route{
		"AuthRolesGet",
		strings.ToUpper("Options"),
		"/Network/v1/Provisioning/auth/roles",
		AuthRolesGet,
	},
	Route{
		"AuthRolesGet",
		strings.ToUpper("Get"),
		"/Network/v1/Provisioning/auth/roles",
		AuthRolesGet,
	},

	Route{
		"AuthTokenPost",
		strings.ToUpper("Options"),
		"/Network/v1/Provisioning/auth/token",
		AuthTokenPost,
	},
	Route{
		"AuthTokenPost",
		strings.ToUpper("Post"),
		"/Network/v1/Provisioning/auth/token",
		AuthTokenPost,
	},

	Route{
		"AuthValidatePost",
		strings.ToUpper("Options"),
		"/Network/v1/Provisioning/auth/validate",
		AuthValidatePost,
	},
	Route{
		"AuthValidatePost",
		strings.ToUpper("Post"),
		"/Network/v1/Provisioning/auth/validate",
		AuthValidatePost,
	},

	Route{
		"ActRequestIdentifierIDProcessingDetailsGet",
		strings.ToUpper("Options"),
		"/Network/v1/Provisioning/actRequest/{identifierID}/processingDetails",
		ActRequestIdentifierIDProcessingDetailsGet,
	},
	Route{
		"ActRequestIdentifierIDProcessingDetailsGet",
		strings.ToUpper("Get"),
		"/Network/v1/Provisioning/actRequest/{identifierID}/processingDetails",
		ActRequestIdentifierIDProcessingDetailsGet,
	},

	Route{
		"AuditDataGet",
		strings.ToUpper("Options"),
		"/Network/v1/Provisioning/auditData",
		AuditDataGet,
	},
	Route{
		"AuditDataGet",
		strings.ToUpper("Get"),
		"/Network/v1/Provisioning/auditData",
		AuditDataGet,
	},

	Route{
		"DataGathererPayloadGet",
		strings.ToUpper("Options"),
		"/Network/v1/Provisioning/dataGathererPayload",
		DataGathererPayloadGet,
	},
	Route{
		"DataGathererPayloadGet",
		strings.ToUpper("Get"),
		"/Network/v1/Provisioning/dataGathererPayload",
		DataGathererPayloadGet,
	},

	Route{
		"DataGathererPayloadRequestIDElementPut",
		strings.ToUpper("Options"),
		"/Network/v1/Provisioning/dataGathererPayload/{requestID}/element",
		DataGathererPayloadRequestIDElementPut,
	},
	Route{
		"DataGathererPayloadRequestIDElementPut",
		strings.ToUpper("Put"),
		"/Network/v1/Provisioning/dataGathererPayload/{requestID}/element",
		DataGathererPayloadRequestIDElementPut,
	},

	Route{
		"FeedbackIdentifierIDGet",
		strings.ToUpper("Options"),
		"/Network/v1/Provisioning/feedback/{identifierID}",
		FeedbackIdentifierIDGet,
	},
	Route{
		"FeedbackIdentifierIDGet",
		strings.ToUpper("Get"),
		"/Network/v1/Provisioning/feedback/{identifierID}",
		FeedbackIdentifierIDGet,
	},

	Route{
		"MwfPayloadGet",
		strings.ToUpper("Options"),
		"/Network/v1/Provisioning/mwfPayload",
		MwfPayloadGet,
	},
	Route{
		"MwfPayloadGet",
		strings.ToUpper("Get"),
		"/Network/v1/Provisioning/mwfPayload",
		MwfPayloadGet,
	},

	Route{
		"RequestStatusGet",
		strings.ToUpper("Options"),
		"/Network/v1/Provisioning/requestStatus",
		RequestStatusGet,
	},
	Route{
		"RequestStatusGet",
		strings.ToUpper("Get"),
		"/Network/v1/Provisioning/requestStatus",
		RequestStatusGet,
	},

	Route{
		"RequestStatusIdGet",
		strings.ToUpper("Options"),
		"/Network/v1/Provisioning/requestStatus/{id}",
		RequestStatusIdGet,
	},
	Route{
		"RequestStatusIdGet",
		strings.ToUpper("Get"),
		"/Network/v1/Provisioning/requestStatus/{id}",
		RequestStatusIdGet,
	},

	Route{
		"RequestStatusIdRefreshPost",
		strings.ToUpper("Options"),
		"/Network/v1/Provisioning/requestStatus/{id}/refresh",
		RequestStatusIdRefreshPost,
	},
	Route{
		"RequestStatusIdRefreshPost",
		strings.ToUpper("Post"),
		"/Network/v1/Provisioning/requestStatus/{id}/refresh",
		RequestStatusIdRefreshPost,
	},

	Route{
		"StatusUpdatesGet",
		strings.ToUpper("Options"),
		"/Network/v1/Provisioning/status/updates",
		StatusUpdatesGet,
	},
	Route{
		"StatusUpdatesGet",
		strings.ToUpper("Get"),
		"/Network/v1/Provisioning/status/updates",
		StatusUpdatesGet,
	},

	Route{
		"StatusUpdatesRequestIdGet",
		strings.ToUpper("Options"),
		"/Network/v1/Provisioning/status/updates/{requestId}",
		StatusUpdatesRequestIdGet,
	},
	Route{
		"StatusUpdatesRequestIdGet",
		strings.ToUpper("Get"),
		"/Network/v1/Provisioning/status/updates/{requestId}",
		StatusUpdatesRequestIdGet,
	},
}

// debug logs debug-level messages with the act-core prefix
// Parameters:
//   - template: Message template with format specifiers
//   - values: Values to be formatted into the template
func debug(template string, values ...interface{}) {
	log.Printf("[act-core][info] "+template+"\n", values...)
}

// infoMsg logs info-level messages with the act-core prefix
// Parameters:
//   - template: Message template with format specifiers
//   - values: Values to be formatted into the template
func infoMsg(template string, values ...interface{}) {
	log.Printf("[act-core][info] "+template+"\n", values...)
}

// errorMsg logs error-level messages with the act-core prefix
// Parameters:
//   - template: Message template with format specifiers
//   - values: Values to be formatted into the template
func errorMsg(template string, values ...interface{}) {
	log.Printf("[act-core][failure] "+template+"\n", values...)
}

// isAuthorized checks if a user token is valid and authorized
// Parameters:
//   - user_token: The user's authentication token
//
// Returns:
//   - bool: Whether the user is authorized
//   - error: Any error that occurred during authorization
func isAuthorized(user_token string) (bool, error) {

	// Validate User Token to determine if authorized
	// TBA
	// infoMsg("isAuthorized: ", ollama_token)

	// Add logic to validate token
	return true, nil
}
